===============================================
NOTAS DE COSAS PARA HACER - WENNERBANK PROJECT
(cosas que faltan implementar en el codigo)
===============================================

------------------------------------------
LISTA PRIORIZADA DE IMPLEMENTACI√ìN
üî¥ FASE 1: FUNCIONALIDADES CR√çTICAS (Implementar YA)

1. Funciones de Sesi√≥n Global
2. Sistema de Login/Logout Completo
3. Protecci√≥n de Operaciones (verificar sesi√≥n)
4. Sistema de Transferencias
5. B√∫squeda de Usuarios (por DNI, email)
6. Asociaci√≥n Cliente-Cuenta (listar cuentas del usuario)
7. Generaci√≥n Autom√°tica de CVU/Alias/IDs
8. Men√∫ Principal y Men√∫s por Rol

üü° FASE 2: FUNCIONALIDADES IMPORTANTES

9.  Modificaci√≥n de Datos de Usuario
10. B√∫squeda de Cuentas (por CVU/Alias)
11. Consulta de Movimientos/Historial
12. Gesti√≥n de Pr√©stamos (crear, listar)
13. Funciones de Validaci√≥n (email, CVU, alias)
14. Cerrar/Reactivar Cuentas

üü¢ FASE 3: MEJORAS Y REFINAMIENTO

15. Reportes y Estad√≠sticas
16. Aplicar Intereses Mensuales Autom√°ticos
17. Sistema de Logs y Auditor√≠a
18. Exportar Movimientos a TXT
19. B√∫squeda Avanzada de Usuarios
20. Manejo de Errores Mejorado








==========================================
MARCAR ESTADOS DE VALIDACIONES
==========================================
TERMINADO simbolo de tick = |‚úîÔ∏è|
EN PROCESO simbolo de cruz = |‚ùå|
REVISAR simbolo de advertencia = |‚ö†Ô∏è|
A MEDIAS simbolo de reloj = |‚è≥|
==========================================
NOTAS DE VALIDACIONES - WENNERBANK PROJECT
(cosas que faltan validar en el codigo)
==========================================

--------------------------------------
VALIDACIONES DE USUARIO/AUTENTICACI√ìN
--------------------------------------
- Validar formato de email: |‚ùå|
    + Que detecte si es "@gmail.com" o "@hotmail.com", en caso de no ser ninguno, solo detectar que
    tenga "@" y ".com".
    + Ejemplo: usuario@dominio.com
    esto se puede hacer con una funcion de string que busque esos caracteres al final del ingreso.
    una funcion llamada validarGmail.com
    + Validar que el email no tenga espacios

- Validar estado del usuario (no eliminado): |‚ùå|
    + Al hacer login, verificar que _UsuarioEliminado == false

- Validar longitud m√≠nima de contrase√±a: |‚ùå|
    + 8 caracteres m√≠nimo, tambien se puede hacer con una funcion de string que cuente caracteres.

- Validar unicidad de email en registro: |‚ùå|
    + Al registrar un nuevo usuario, buscar en el archivo si ya existe ese email.

- Validar combinaci√≥n email/contrase√±a en login: |‚ùå|
    + Al iniciar sesi√≥n, buscar en el archivo si existe el email y si la contrase√±a coincide.

----------------------------------
VALIDACIONES DE CUENTAS BANCARIAS
----------------------------------
- Validar saldo inicial de la cuenta: |‚ùå|
    + verificar que el saldo no sea negativo.

- Validar la cuenta a transferir: |‚ùå|
    + buscar la cuenta en el archivo y verificar su estado, viendo si est√° activa. Si lo est√°
    mostrar nombre, apellido y dni del titular para confirmar, pero si no existe o est√° inactiva
    mostrar un mensaje de error.

- Validar unicidad de CVU: |‚ùå|
    + Al crear cuenta, verificar que el CVU no exista en el archivo

- Validar unicidad de Alias: |‚ùå|
    + Al crear cuenta, verificar que el alias no est√© en uso

- Validar formato de CVU (10 d√≠gitos): |‚ùå|
    + Verificar que sean exactamente 10 caracteres num√©ricos

- Validar formato de Alias (alfanum√©rico con puntos): |‚ùå|
    + Formato: NOMBRE.APELLIDO.NUMERO o similar
    + Sin espacios, solo letras, n√∫meros y puntos

- Validar que el cliente tenga sesi√≥n activa: |‚ùå|
    + Solo permitir operaciones si el usuario est√° logueado

------------------------------
VALIDACIONES DE TRANSACCIONES
------------------------------
- Validar monto mayor a 0: |‚ùå|
    + no permitir transferencias o retiros de monto 0 o negativo.

- Validar formato num√©rico del monto: |‚è≥|
    + asegurarse que el monto ingresado sea un n√∫mero v√°lido (sin letras o caracteres especiales).
    + Parcialmente implementado en validarEntero()

- Validar cuenta origen y destino diferentes: |‚ùå|
    + no permitir transferencias a la misma cuenta.

- Validar saldo disponible en cuenta origen: |‚ùå|
    + verificar que la cuenta origen tenga suficiente saldo para realizar la transferencia.

- Validar estado de la cuenta (no eliminada): |‚ùå|
    + asegurarse que ambas cuentas (origen y destino) est√©n activas.

- Validar que la cuenta origen pertenezca al usuario logueado: |‚ùå|
    + Verificar que _idCliente de la cuenta coincida con el usuario actual
    + Excepto para Empleado/Admin

- Registrar fecha y hora de la transacci√≥n: |‚ùå|
    + Usar Fecha::cargarFechaActual() y Tiempo::cargarTiempoActual()

---------------------------------
VALIDACIONES DE DATOS PERSONALES
---------------------------------
- Validar unicidad de DNI: |‚ùå|
    + Al crear Cliente/Empleado, verificar que el DNI no exista

- Validar que nombre y apellido no tengan n√∫meros: |‚ùå|
    + Solo permitir letras y espacios

- Validar longitud de localidad: |‚ùå|
    + M√≠nimo 2 caracteres, m√°ximo 49

- Validar formato de documento de identidad: |‚úîÔ∏è|
    + asegurarse que el DNI tenga solo n√∫meros y la longitud correcta.
    + Implementado en Persona::cargarDatos() con validarEntero(8 d√≠gitos)

- Validar fecha de nacimiento (mayor√≠a de edad): |‚ùå|
    + calcular la edad a partir de la fecha de nacimiento y verificar que sea mayor de 18 a√±os.

--------------------------
VALIDACIONES DE SEGURIDAD 
--------------------------

- Validar permisos por rol: |‚ùå|
    + Cliente: solo sus propias cuentas
    + Empleado: operaciones limitadas
    + Admin: acceso total

- Validar sesi√≥n activa antes de operaciones sensibles: ‚ùå
    + Crear variable global o struct de sesi√≥n
    + Verificar en: menuCuenta, realizarTransferencia, etc.

- Validar intentos de login fallidos: |‚ùå|
    + regresar al inicio del programa despu√©s de 5 intentos fallidos.

- Validar que no se modifiquen datos del Admin: |‚úîÔ∏è|
    + El admin (singleton) no debe ser modificable

----------------------------
VALIDACIONES DE FORMULARIOS
----------------------------
- Validar campos obligatorios: |‚ùå|
    + asegurarse que todos los campos requeridos est√©n completos antes de enviar el formulario.

- Validar longitud m√°xima/m√≠nima de campos: |‚ùå|
    + verificar que los campos de texto no excedan la longitud m√°xima permitida y cumplan con la longitud m√≠nima requerida.

- Validar tipos de datos correctos: |‚è≥|
    + asegurarse que los datos ingresados sean del tipo esperado (ejemplo: n√∫meros, texto, etc.).
    + Parcialmente implementado en validarEntero()
    + Falta para strings (nombres, email, etc.)

- Validar ingreso de fechas: |‚úîÔ∏è|
    + asegurarse que las fechas ingresadas esten en el rango permitido y tengan el formato correcto.
    + Implementado en Fecha::cargarFecha() con validarEntero()

--------------------------------
VALIDACIONES DE PR√âSTAMOS
--------------------------------
- Validar que el cliente exista y est√© activo: |‚ùå|
    + Buscar _idCliente en archivo y verificar estado

- Validar monto del pr√©stamo (rango permitido): |‚ùå|
    + M√≠nimo y m√°ximo seg√∫n pol√≠tica del banco

- Verificar actualizacion del nuevo valor de la deuda despues de cada mes: |‚ùå|
    + deudaTotal = deudaTotal + (deudaTotal * tasaInteres)
    + Ej: deudaTotal = deudaTotal + (deudaTotal * 0.05) para 5% mensual
    + o deudaTotal = deudaTotal * 1.05

- Validar fecha de vencimiento posterior a inicio: |‚ùå|
    + fechaVencimiento > fechaInicio

- Validar que el cliente no tenga pr√©stamo vigente: |‚ùå|
    + Buscar en prestamos.dat si ya tiene uno activo

------------------------------
VALIDACIONES DE ARCHIVOS
------------------------------
- Validar que el archivo se abra correctamente: |‚úîÔ∏è|
    + Verificar que fopen() != nullptr

- Validar que la escritura sea exitosa: |‚úîÔ∏è|
    + Verificar retorno de fwrite()

- Validar que la lectura sea exitosa: |‚ùå|
    + Verificar retorno de fread()

- Crear archivo si no existe: |‚úîÔ∏è|Ô∏è
    + Modo "ab" para append o crear si no existe

=========================================================================================

PRIORIDADES

Fase 1 (Cr√≠ticas):

1. Validar sesi√≥n activa
2. Validar unicidad de email/DNI
3. Validar formato de email
4. Validar saldo disponible en transacciones
5. Validar archivos (apertura/lectura/escritura)

Fase 2 (Importantes):

6. Validar permisos por rol
7. Validar cuentas activas
8. Validar mayor√≠a de edad
9. Validar intentos de login

Fase 3 (Refinamiento):

10. Validar formatos (CVU, Alias)
11. Validar nombres sin n√∫meros
12. L√≠mites de transacci√≥n